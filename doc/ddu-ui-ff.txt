*ddu-ui-ff.txt*	Fuzzy finder UI for ddu.vim

Author: Shougo <Shougo.Matsu at gmail.com>
License: MIT license

CONTENTS                                                  *ddu-ui-ff-contents*

Introduction		|ddu-ui-ff-introduction|
Install			|ddu-ui-ff-install|
Interface		|ddu-ui-ff-interface|
  Functions		  |ddu-ui-ff-functions|
  Actions		  |ddu-ui-ff-actions|
  Params		  |ddu-ui-ff-params|
  Params expression	  |ddu-ui-ff-params-expression|
  Autocmds		  |ddu-ui-ff-autocmds|
Examples		|ddu-ui-ff-examples|
FAQ			|ddu-ui-ff-faq|
Compatibility		|ddu-ui-ff-compatibility|


==============================================================================
INTRODUCTION                                          *ddu-ui-ff-introduction*

This UI is standard fuzzy finder.


==============================================================================
INSTALL                                                    *ddu-ui-ff-install*

Please install both "ddu.vim" and "denops.vim".

https://github.com/Shougo/ddu.vim
https://github.com/vim-denops/denops.vim


==============================================================================
INTERFACE                                                *ddu-ui-ff-interface*


------------------------------------------------------------------------------
FUNCTIONS                                                *ddu-ui-ff-functions*

                                   *ddu-ui-ff-function-ddu#ui#ff#save_cmaps()*
ddu#ui#ff#save_cmaps({keys})
		Save command line maps for {keys}.
		It is useful to use
		in |ddu-ui-ff-autocmd-Ddu:ui:ff:openFilterWindow| autocmd.

                                *ddu-ui-ff-function-ddu#ui#ff#restore_cmaps()*
ddu#ui#ff#restore_cmaps()
		Restore command line maps saved by
		|ddu-ui-ff-function-ddu#ui#ff#save_cmaps()|.
		It is useful to use
		in |ddu-ui-ff-autocmd-Ddu:ui:ff:closeFilterWindow| autocmd.

------------------------------------------------------------------------------
ACTIONS                                                    *ddu-ui-ff-actions*

                                                 *ddu-ui-ff-action-checkItems*
checkItems
		Check the items are updated.
		NOTE: Source support is needed for the feature.

                                               *ddu-ui-ff-action-chooseAction*
chooseAction
		Choose and fire the action by ddu UI.
		NOTE: Quit the UI after executing the action.

		NOTE: "ddu-source-action" is required.
		https://github.com/Shougo/ddu-source-action

                                        *ddu-ui-ff-action-clearSelectAllItems*
clearSelectAllItems
		Clear all selected items.

                                         *ddu-ui-ff-action-closePreviewWindow*
closePreviewWindow
		Close the preview window.

                                               *ddu-ui-ff-action-collapseItem*
collapseItem
		Collapse the item tree.
		If the item is already collapsed, the parent item is used.

                                                 *ddu-ui-ff-action-cursorNext*
cursorNext
		params:
			{count}: Move count
			{loop}: Loop the cursor

		Move the cursor to the next.

                                             *ddu-ui-ff-action-cursorPrevious*
cursorPrevious
		params:
			{count}: Move count
			{loop}: Loop the cursor

		Move the cursor to the previous.

                                           *ddu-ui-ff-action-cursorTreeBottom*
cursorTreeBottom

		Move the cursor to the bottom of current tree.

                                              *ddu-ui-ff-action-cursorTreeTop*
cursorTreeTop

		Move the cursor to the top of current tree.

                                                 *ddu-ui-ff-action-expandItem*
expandItem
		params:
			{mode}: The supported values are:

				"toggle":
					Close the item tree if the directory
					is opened.

			{maxLevel}:
				Maximum expand recursive level.
				If it is less than 0, infinite recursive.

			{isGrouped}:
				If it is only one item tree, it will be
				concatenated.

			{isInTree}:
				If it is not empty tree, enter the tree.

		Expand the item tree.

                                                    *ddu-ui-ff-action-getItem*
getItem
		Set cursor item to "b:ddu_ui_item" variable.

                                           *ddu-ui-ff-action-getSelectedItems*
getSelectedItems
		Set selected items to "b:ddu_ui_selected_items" variable.

                                                *ddu-ui-ff-action-inputAction*
inputAction
		Prompt for a name using |input()| and fire the action with it.

                                                 *ddu-ui-ff-action-itemAction*
itemAction
		params:
			{name}: Action name
			{params}: Action params dictionary

		Close the UI window and fire {name} action for selected or
		current cursor items.
		You can find the actions list in item's kind documentation.
		If {name} is empty, "default" will be used.

		NOTE: You cannot mix multiple kinds/sources.

                                           *ddu-ui-ff-action-openFilterWindow*
openFilterWindow
		Open the filter window in command line.

		params:
			{input}: Overwrite current input

                                                    *ddu-ui-ff-action-preview*
preview
		params:
			{syntaxLimitChars}: 	Max number of chars to apply
						'syntax' and 'filetype' to
						previewed contents.
						(Default: 400000)

			The remaining params are passed to |ddu-kinds|.
			See also |ddu-kind-attribute-getPreviewer| and kinds
			documentation.

		Preview the item in preview window.

                                             *ddu-ui-ff-action-previewExecute*
previewExecute
		params:
			{command}: 	Command to execute

		Execute command in preview window.

                                                *ddu-ui-ff-action-previewPath*
previewPath
		Preview the item path in echo area.
		NOTE: 'cmdheight' must be greater than 0.

                                                       *ddu-ui-ff-action-quit*
quit
		Quit the UI window.

		params:
			{force}: Force quit buffer if it is non zero.
				NOTE: You can't resume the buffer.

                                                     *ddu-ui-ff-action-redraw*
redraw
		params:
			{method}: Redraw method

			"refreshItems": Gather all source items and execute
				"uiRefresh".
			"uiRefresh": Refresh UI items and execute "uiRedraw".
				(Default)
			"uiRedraw": Redraw current UI window.

		Redraw the UI.
		NOTE: The preview window is closed when |ddu-ui-ff-params| is
		changed.

                                             *ddu-ui-ff-action-toggleAllItems*
toggleAllItems
		Toggle selected state for the all items.

                                           *ddu-ui-ff-action-toggleAutoAction*
toggleAutoAction
		Toggle auto action state(enabled/disabled).

                                              *ddu-ui-ff-action-togglePreview*
togglePreview
		Toggle |ddu-ui-ff-action-preview| for cursor item.

                                           *ddu-ui-ff-action-toggleSelectItem*
toggleSelectItem
		Toggle selected state for cursor item.

                                              *ddu-ui-ff-action-updateOptions*
updateOptions
		params:
			{option-name}: Option name and value

		Update current options. Refer to |ddu-options| about options.
		NOTE: It does not redraw items.
		NOTE: If you execute it in the action, |ddu-options| is not
		updated in current context.

------------------------------------------------------------------------------
PARAMS                                                      *ddu-ui-ff-params*

                                                  *ddu-ui-ff-param-autoAction*
autoAction	(dictionary)
		If it is specified, the UI action is executed when the cursor
		is moved. It has the following keys.
		NOTE: If you want to enable autoAction when UI started, you
		must set |ddu-ui-ff-param-startAutoAction|.

		delay				(number)	(Optional)
		Time in milliseconds to delay the auto action.
		If you feel slow, specify large value.
		Set 0 to disable debouncing.
		NOTE: It does not work in the filter window.

		Default: 10

		name				(string)	(Required)
		Action name

		params				(dictionary)	(Optional)
		Action params

		Default: {}

		sync				(boolean)	(Optional)
		If it is true, action is executed synchronously.
		NOTE: If it is false, the screen may be flickered.

		Default: v:true

                                                  *ddu-ui-ff-param-autoResize*
autoResize	(boolean)
		Auto resize the window height automatically.

		Default: v:false

                                                   *ddu-ui-ff-param-cursorPos*
cursorPos	(number)
		Select {number} candidate.  It is 1 origin.
		If you set the option, cursor restore feature is disabled.

		Default: 0

                                           *ddu-ui-ff-param-displaySourceName*
displaySourceName	(string)
		Display source name in the buffer. Following values are
		available:

		"long": display full source name
		"short": display shorter source name
		"no": does not display

		Default: "no"

                                                 *ddu-ui-ff-param-displayTree*
displayTree	(boolean)
		Display tree structure.

		Default: v:false

                                                  *ddu-ui-ff-param-exprParams*
exprParams	(string[])
		Evaluate params list.
		If the param is string, it is evaluated as
		|ddu-ui-ff-params-expression|.

		Default: [
		  "previewCol",
		  "previewRow",
		  "previewHeight",
		  "previewWidth",
		  "winCol",
		  "winRow",
		  "winHeight",
		  "winWidth",
		]

                                        *ddu-ui-ff-param-filterUpdateCallback*
filterUpdateCallback (string)
		Specify the callback when update in the filter window.
		The function argument is {input} and it returns the new input
		string.
>vim
	function! DduFilterCallback(input)
	  if a:input->stridx('@') != 0
	    return a:input
	  endif
	
	  " Use file source instead.
	  call ddu#ui#do_action('updateOptions', #{
	        \   sources: [
	        \     #{ name: 'file' },
	        \   ],
	        \ })
	  call ddu#ui#do_action('redraw', #{ method: 'refreshItems' })
	
	  return a:input[1:]
	endfunction
<

		Default: ""

                                             *ddu-ui-ff-param-filterUpdateMax*
filterUpdateMax	(number)
		Specify the maximum item number to update in the filter
		window.
		If it is less than equal 0, the feature will be disabled.

		Default: 0

                                              *ddu-ui-ff-param-floatingBorder*
floatingBorder		(string | list)
		Specify the style of the window border if
		|ddu-ui-ff-param-split| is "floating".
		See |nvim_open_win()| or |popup_create-arguments| for the
		detail.

		Following values are available:

		"none": Disabled.
		"single": A single line box.
		"double": A double line box.
		"rounded": Neovim only.
		"solid": Neovim only.
		"shadow": Neovim only.
		array: Specifify the eight chars building up the border.

		Default: "none"

                                               *ddu-ui-ff-param-floatingTitle*
floatingTitle		(string | list)
		Specify the title of the window border if
		|ddu-ui-ff-param-floatingBorder| is not "none".

		Default: ""

                                            *ddu-ui-ff-param-floatingTitlePos*
floatingTitlePos	(string)
		Specify the title position of the window border if
		|ddu-ui-ff-param-floatingBorder| is not "none".
		See |nvim_open_win()| for the detail.
		NOTE: It is Neovim only.

		Default: "left"

                                                       *ddu-ui-ff-param-focus*
focus		(boolean)
		Focus on the UI window after opening the UI window.

		Default: v:true

                                                  *ddu-ui-ff-param-highlights*
highlights	(dictionary)
		It specifies ddu-ui-ff buffer highlights.
		It can contain following keys

		filterText			(string)
		Specify filter text highlight.
		Default: "Normal"

		floating			(string)
		Specify floating window background highlight.
		Default: "NormalFloat"

		floatingBorder			(string)
		Specify border highlight of flowing window
		Default: "FloatBorder"

		floatingCursorLine		(string)
		Specify cursor line highlight of floating window
		Default: "CursorLine"

		preview				(string)
		Specify preview window highlight.
		Default: "Search"

		selected			(string)
		Specify selected item highlight.
		Default: "Statement"

		Default: {}

                                                 *ddu-ui-ff-param-ignoreEmpty*
ignoreEmpty	(boolean)
		Don't open the UI window if the items are empty.
		NOTE: It works only if the UI window is not visible.

		Default: v:false

                                             *ddu-ui-ff-param-immediateAction*
immediateAction (string)
		If it is not empty and the number of item is exactly one, it
		runs |ddu-ui-ff-action-itemAction| immediately.

		NOTE: You need to set |ddu-option-sync|.  Because UI window
		may be created before all sources are finished.
		NOTE: It works only if the UI window is not visible.

		Default: ""

                                                   *ddu-ui-ff-param-inputFunc*
inputFunc	(string)
		Specify the input function name when
		|ddu-ui-ff-action-openFilterWindow|.
		For example: |cmdline#input()|
		NOTE: The function must have the same interface as |input()|.

		Default: "input"

                                               *ddu-ui-ff-param-inputOptsFunc*
inputOptsFunc	(string)
		Specify the input({opts}) function name when
		|ddu-ui-ff-action-openFilterWindow|.
		For example: |cmdline#input_opts()|
		NOTE: The function must have the same interface as |input()|
		with {opts} argument.
		NOTE: It is Neovim only.

		Default: ""

                                             *ddu-ui-ff-param-maxDisplayItems*
maxDisplayItems (number)
		The maximum number of displayed items.
		NOTE: If you increase the param, the UI will be slower.

		Default: 1000

                                           *ddu-ui-ff-param-maxHighlightItems*
maxHighlightItems (number)
		The maximum number of highlighted items.
		NOTE: If you increase the param, the UI will be slower.

		Default: 100

                                                   *ddu-ui-ff-param-onPreview*
onPreview	(function)
		It is called when |ddu-ui-ff-action-preview| is fired.
		NOTE: The function must be registered by
		|denops#callback#register()|.
		NOTE: Current window may not be the preview window.

                                                  *ddu-ui-ff-param-pathFilter*
pathFilter	(string)
		Filter regexp string for path items.
		NOTE: It is JavaScript regexp.

		Default: ""

                                                  *ddu-ui-ff-param-previewCol*
previewCol	(number)
		Set the column position of the preview window if
		|ddu-ui-ff-param-previewFloating| is v:true.

		Default: 0

                                             *ddu-ui-ff-param-previewFloating*
previewFloating	(boolean)
		Use floating window in |ddu-ui-ff-action-preview|.

		Default: v:false

                                       *ddu-ui-ff-param-previewFloatingBorder*
previewFloatingBorder		(string | list)
		Specify the style of the preview window border if
		|ddu-ui-ff-param-previewFloating| is v:true.
		See |nvim_open_win()| for the detail.
		NOTE: It is Neovim only.

		Default: "none"

                                        *ddu-ui-ff-param-previewFloatingTitle*
previewFloatingTitle	(string | list)
		Specify the title of the preview floating window with border
		if |ddu-ui-ff-param-previewFloatingBorder| is not "none".

		Default: ""

                                     *ddu-ui-ff-param-previewFloatingTitlePos*
previewFloatingTitlePos	(string)
		Specify the title position of the preview floating window with
		border if |ddu-ui-ff-param-previewFloatingBorder| is not
		"none".

		Default: "left"

                                       *ddu-ui-ff-param-previewFloatingZindex*
previewFloatingZindex		(number)
		Specify the style of the preview window zindex if
		|ddu-ui-ff-param-split| is "floating".

		Default: 100

                                               *ddu-ui-ff-param-previewHeight*
previewHeight	(number)
		Set the height of the |preview-window| in
		|ddu-ui-ff-action-preview|.
		If |ddu-ui-ff-param-previewFloating|, set the height of the
		floating window.
		NOTE: If |ddu-ui-ff-param-previewSplit| is "horizontal", the
		value must be less than `&lines - 2`.

		Default: 10

                                              *ddu-ui-ff-param-previewMaxSize*
previewMaxSize	(number)
		Set the maximum file size for preview.

		Default: 1000000

                                                  *ddu-ui-ff-param-previewRow*
previewRow	(number)
		Set the row position of the preview window if
		|ddu-ui-ff-param-previewFloating| is v:true.

		Default: 0

                                                *ddu-ui-ff-param-previewSplit*
previewSplit	(string)
		Specify preview split mode in |ddu-ui-ff-action-preview|.

		Following values are available:

		"horizontal":
			horizontal split, |ddu-ui-ff-param-winWidth| is
			used.
		"vertical":
			vertical split, |ddu-ui-ff-param-winHeight| is
			used.
		"no":
			no split

		Default: "horizontal"

                                                *ddu-ui-ff-param-previewWidth*
previewWidth	(number)
		Set the width of the |preview-window| in
		|ddu-ui-ff-action-preview|.
		If |ddu-ui-ff-param-previewFloating|, set the width of the
		floating window.

		Default: 80

                                        *ddu-ui-ff-param-previewWindowOptions*
previewWindowOptions	(list)
		Set the window options of the |preview-window| in
		|ddu-ui-ff-action-preview|.
		If |ddu-ui-ff-param-previewFloating| is set, set the options
		of the floating window.
		See |options| for the detail.
		NOTE: The options are applied in the array order.

		Default:

		[
			["&signcolumn", "no"],
			["&foldcolumn", 0],
			["&foldenable", 0],
			["&number", 0],
			["&wrap", 0],
		]

                                                      *ddu-ui-ff-param-prompt*
prompt		(string)
		Specify the prompt in the filter window.
		NOTE: It must be one or two width characters.

		Default: ""

                                                  *ddu-ui-ff-param-replaceCol*
replaceCol	(number)
		Set the column position of the replace current text after
		actions.
		It is useful for insert/command mode.

		Default: 0

                                                    *ddu-ui-ff-param-reversed*
reversed	(boolean)
		Display the items in reversed order.
		NOTE: It may increase screen flicker.  Because the cursor must
		be moved if you narrowing text.

		Default: v:false

                                                       *ddu-ui-ff-param-split*
split		(string)
		Specify split mode.

		Following values are available:

		"horizontal": horizontal split
		"vertical": vertical split
		"floating": use floating window feature
		"tab": use new tab
		"no": no split

		NOTE: "floating" does not work in Vim.

		Default: "horizontal"

                                              *ddu-ui-ff-param-splitDirection*
splitDirection	(string)
		Specify split direction.

		Default: "botright"

                                             *ddu-ui-ff-param-startAutoAction*
startAutoAction	(boolean)
		If it is true, |ddu-ui-ff-param-autoAction| is fired
		automatically.
		Note: It must be set before UI initialization.

		Default: v:false

                                                  *ddu-ui-ff-param-statusline*
statusline	(boolean)
		If it is true, the original 'statusline' value is set on the
		buffer.

		Default: v:true

                                                      *ddu-ui-ff-param-winCol*
winCol		(number | string)
		Set the column position of the window if
		|ddu-ui-ff-param-split| is "floating".

		Default: "(&columns - eval(uiParams.winWidth)) / 2"

                                                   *ddu-ui-ff-param-winHeight*
winHeight	(number | string)
		Set the height of the window if |ddu-ui-ff-param-split| is
		"horizontal".
		If |ddu-ui-ff-param-split| is "floating",
		set the height of the floating window.
		NOTE: If |ddu-ui-ff-param-split| is "horizontal", the value
		must be less than `&lines - 2`.

		Default: 20

                                                      *ddu-ui-ff-param-winRow*
winRow		(number | string)
		Set the row position of the window if |ddu-ui-ff-param-split|
		is "floating".

		Default: "&lines / 2 - 10"

                                                    *ddu-ui-ff-param-winWidth*
winWidth	(number | string)
		Set the width of the window if |ddu-ui-ff-param-split| is
		"vertical".
		If |ddu-ui-ff-param-split| is "floating", set the width of
		the floating window.

		Default: "&columns / 2"

------------------------------------------------------------------------------
PARAMS EXPRESSION                                *ddu-ui-ff-params-expression*

If the parameter value is a string, it can be evaluated as a Vim |expression|.
Expressions must not have side effects.  The following variables exist in the
expression context:

	bufName		(string)
	bufNr		(number)
	itemCount	(number)
	sources		(string[])
	uiParams	(|ddu-ui-ff-params|)
	winId		(number)

An example of floating the UI window on the left side and the preview window
on the right side of the screen: >vim

	call ddu#custom#patch_global(#{
	    \   ui: 'ff',
	    \   uiParams: #{
	    \     ff: #{
	    \       split: 'floating',
	    \       winHeight: '&lines - 8',
	    \       winWidth: '&columns / 2 - 2',
	    \       winRow: 1,
	    \       winCol: 1,
	    \       previewFloating: v:true,
	    \       previewHeight: '&lines - 8',
	    \       previewWidth: '&columns / 2 - 2',
	    \       previewRow: 1,
	    \       previewCol: '&columns / 2 + 1',
	    \     }
	    \   },
	    \ })
<

------------------------------------------------------------------------------
AUTOCMDS                                                  *ddu-ui-ff-autocmds*

ddu-ui-ff defines some |User| autocmds.

                                *ddu-ui-ff-autocmd-Ddu:ui:ff:openFilterWindow*
Ddu:ui:ff:openFilterWindow
		Called after |ddu-ui-ff-action-openFilterWindow| is called.

                               *ddu-ui-ff-autocmd-Ddu:ui:ff:closeFilterWindow*
Ddu:ui:ff:closeFilterWindow
		Called after filter window is closed.


==============================================================================
EXAMPLES                                                  *ddu-ui-ff-examples*
>vim
	call ddu#custom#patch_global(#{
	    \   ui: 'ff',
	    \ })

	autocmd FileType ddu-ff call s:ddu_ff_my_settings()
	function s:ddu_ff_my_settings() abort
	  nnoremap <buffer> <CR>
	  \ <Cmd>call ddu#ui#do_action('itemAction')<CR>
	  nnoremap <buffer> <Space>
	  \ <Cmd>call ddu#ui#do_action('toggleSelectItem')<CR>
	  nnoremap <buffer> i
	  \ <Cmd>call ddu#ui#do_action('openFilterWindow')<CR>
	  nnoremap <buffer> q
	  \ <Cmd>call ddu#ui#do_action('quit')<CR>
	endfunction
<

==============================================================================
FREQUENTLY ASKED QUESTIONS (FAQ)                               *ddu-ui-ff-faq*

FAQ 1:                                                       |ddu-ui-ff-faq-1|
	I want to toggle hidden files by mappings.

FAQ 2:                                                       |ddu-ui-ff-faq-2|
	I want to call default action in the filter window.

FAQ 3:                                                       |ddu-ui-ff-faq-3|
	I want to move the cursor in the filter window, while in insert mode.

FAQ 4:                                                       |ddu-ui-ff-faq-4|
	I want to define |ddu-option-name| depend key mappings.

FAQ 5:                                                       |ddu-ui-ff-faq-5|
	I want to define kind depend key mappings.

FAQ 6:                                                       |ddu-ui-ff-faq-6|
	I want to pass params to the action when
	|ddu-ui-ff-action-chooseAction|.

FAQ 7:                                                       |ddu-ui-ff-faq-7|
	I want to use Vim syntax highlight in the buffer.

FAQ 8:                                                       |ddu-ui-ff-faq-8|
	I want to custom the statusline.

FAQ 9:                                                       |ddu-ui-ff-faq-9|
	I want to move to line quickly like denite.nvim's "quick-move"
	feature.

FAQ 10:                                                     |ddu-ui-ff-faq-10|
	Why ddu-ui-ff does not support Vim's popup window feature instead of
	Neovim's floating window feature?

FAQ 11:                                                     |ddu-ui-ff-faq-11|
	I want to toggle selected items in visual mode.

FAQ 12:                                                     |ddu-ui-ff-faq-12|
	I want to use "ddu-ui-ff" in insert mode.

FAQ 13:                                                     |ddu-ui-ff-faq-13|
	I want to use "ddu-ui-ff" in command line mode.

FAQ 14:                                                     |ddu-ui-ff-faq-14|
	I want to switch sources without clear current filter input.

FAQ 15:                                                     |ddu-ui-ff-faq-15|
	I want to use existing buffer to show preview.

FAQ 16:                                                     |ddu-ui-ff-faq-16|
	":UniteNext"/":UnitePrevious"/":Denite -resume -cursor-pos=+1
	-immediately" like commands are available?

FAQ 17:                                                     |ddu-ui-ff-faq-17|
	I want to display cursor mark on the left of ddu window like
	"telescope.nvim".

FAQ 18:                                                     |ddu-ui-ff-faq-18|
	How do I set the floating title with list style ?

FAQ 19:                                                     |ddu-ui-ff-faq-19|
	I want to align column when |ddu-ui-ff-param-prompt| is set.

FAQ 20:                                                     |ddu-ui-ff-faq-20|
	When calling |ddu-ui-ff-action-quit| or |ddu-ui-ff-action-itemAction|
	from filter window, it remains filter window.

FAQ 21:                                                     |ddu-ui-ff-faq-21|
	I cannot see what item is selected in the filter window.

FAQ 22:                                                     |ddu-ui-ff-faq-22|
	I want to change preview cursor on the top.

FAQ 23:                                                     |ddu-ui-ff-faq-23|
	I want to scroll preview window.

FAQ 24:                                                     |ddu-ui-ff-faq-24|
	I want to preview selected item automatically.

FAQ 25:                                                     |ddu-ui-ff-faq-25|
	I want to start filter window when UI is initialized.

FAQ 26:                                                     |ddu-ui-ff-faq-26|
	I want to change filter window position.

FAQ 27:                                                     |ddu-ui-ff-faq-27|
	The filter input is cleared when I press <ESC> key.

FAQ 28:                                                     |ddu-ui-ff-faq-28|
	The cursor is not restored when the items are refreshed.

------------------------------------------------------------------------------
                                                             *ddu-ui-ff-faq-1*
Q: I want to start narrowing in the first.

A: You can use |input()| like this.
>
	call ddu#start(#{ input: 'Pattern:'->input() })
<
                                                             *ddu-ui-ff-faq-2*
Q: I want to call default action in the filter window.

A: >vim
	autocmd User Ddu:ui:ff:openFilterWindow
	      \ call s:ddu_ff_filter_my_settings()
	function s:ddu_ff_filter_my_settings() abort
	  let s:save_cr = '<CR>'->maparg('c', v:false, v:true)

	  cnoremap <CR>
	      \ <ESC><Cmd>call ddu#ui#do_action('itemAction')<CR>
	endfunction
	autocmd User Ddu:ui:ff:closeFilterWindow
	      \ call s:ddu_ff_filter_cleanup()
	function s:ddu_ff_filter_cleanup() abort
	  if s:save_cr->empty()
	    cunmap <CR>
	  else
	    call mapset('c', 0, s:save_cr)
	  endif
	endfunction
<

NOTE: You must restore keys when
|ddu-ui-ff-autocmd-Ddu:ui:ff:closeFilterWindow|.

                                                             *ddu-ui-ff-faq-3*
Q: I want to move the cursor in the filter window, while in insert mode.

A: Really? It is not the Vim way to move the cursor while in insert mode. You
must force this behaviour.
>vim
	autocmd User Ddu:ui:ff:openFilterWindow
	      \ call s:ddu_ff_filter_my_settings()
	function s:ddu_ff_filter_my_settings() abort
	  set cursorline

	  call ddu#ui#ff#save_cmaps(['<C-j>', '<C-k>'])

	  cnoremap <C-j>
	        \ <Cmd>call ddu#ui#do_action('cursorNext')<CR>
	  cnoremap <C-k>
	        \ <Cmd>call ddu#ui#do_action('cursorPrevious')<CR>
	endfunction

	autocmd User Ddu:ui:ff:closeFilterWindow
	      \ call s:ddu_ff_filter_cleanup()
	function s:ddu_ff_filter_cleanup() abort
	  set nocursorline

	  call ddu#ui#ff#restore_cmaps()
	endfunction
<

If you want to loop the cursor:
NOTE: It does not support |ddu-ui-ff-param-reversed|.
>vim
	autocmd User Ddu:ui:ff:openFilterWindow
	      \ call s:ddu_ff_filter_my_settings()
	function s:ddu_ff_filter_my_settings() abort
	  setlocal cursorline

	  call ddu#ui#ff#save_cmaps(['<C-j>', '<C-k>'])

	  cnoremap <C-j>
	        \ <Cmd>call ddu#ui#do_action('cursorNext',
	        \ #{ loop: v:true })<CR>
	  cnoremap <C-k>
	        \ <Cmd>call ddu#ui#do_action('cursorPrevious',
	        \ #{ loop: v:true })<CR>
	endfunction
<
                                                             *ddu-ui-ff-faq-4*
Q: I want to define |ddu-option-name| depend key mappings.

A: You can use "b:ddu_ui_name". >vim

	autocmd FileType ddu-ff call s:ddu_ff_my_settings()
	function s:ddu_ff_my_settings() abort
	  if b:ddu_ui_name ==# 'foo'
	    nnoremap <buffer> e
	    \ <Cmd>call ddu#ui#do_action('itemAction', {'name': 'edit'})<CR>
	  endif
	endfunction
<
                                                             *ddu-ui-ff-faq-5*
Q: I want to define kind depend key mappings.

A: You can use |ddu#ui#get_item()|. >vim

	autocmd FileType ddu-ff call s:ddu_ff_my_settings()
	function s:ddu_ff_my_settings() abort
	  nnoremap <buffer> e
	  \ <Cmd>call ddu#ui#do_action('itemAction',
	  \ ddu#ui#get_item()->get('kind', '') ==# 'file' ?
	  \ {'name': 'edit'} : {'name': 'open'})<CR>
	endfunction
<
                                                             *ddu-ui-ff-faq-6*
Q: I want to pass params to the action when |ddu-ui-ff-action-chooseAction|.

A: You can pass params like this. >vim
	autocmd FileType ddu-ff call s:ddu_ff_my_settings()
	function s:ddu_ff_my_settings() abort
	  nnoremap <buffer> E
	  \ <Cmd>call ddu#ui#do_action('itemAction',
	  \ {'params': eval(input('params: '))})<CR>
	endfunction
<
                                                             *ddu-ui-ff-faq-7*
Q: I want to use Vim syntax highlight in the buffer.

A: Please set 'syntax' option in |FileType| autocmd.
If you want to use |treesitter|, you need to stop it manually after quit. >vim
	autocmd FileType ddu-ff call s:ddu_ff_my_settings()
	function s:ddu_ff_my_settings() abort
	  if b:ddu_ui_name ==# 'vim'
	    setlocal syntax=vim
	    " Or
	    " lua vim.treesitter.start(nil, 'vim')
	    " autocmd WinClosed <buffer> ++once lua vim.treesitter.stop()
	  endif
	endfunction
<
                                                             *ddu-ui-ff-faq-8*
Q: I want to custom the statusline.

A: You can disable the original statusline by |ddu-ui-ff-param-statusline|.
And you can get the status line information by "w:ddu_ui_ff_status" variable.

                                                             *ddu-ui-ff-faq-9*
Q: I want to move to line quickly like denite.nvim's "quick-move" feature.

A: Please use qselect.vim for it.
https://github.com/Shougo/qselect.vim

                                                            *ddu-ui-ff-faq-10*
Q: Why ddu-ui-ff does not support Vim's popup window feature instead of
Neovim's floating window feature?
https://github.com/Shougo/ddu-ui-ff/issues/48

A: Because Vim's popup window feature is not focusable.
ddu-ui-ff implementation depends on the feature.  So the support is not
acceptable.

                                                            *ddu-ui-ff-faq-11*
Q: I want to toggle selected items in visual mode.

A: >vim
  xnoremap <buffer> <Space>
  \ :call ddu#ui#do_action('toggleSelectItem')<CR>
<
                                                            *ddu-ui-ff-faq-12*
Q: I want to use "ddu-ui-ff" in insert mode.
NOTE: It is experimental feature.

A: >vim
	inoremap <C-q> <Cmd>call ddu#start(#{
	\   name: 'file',
	\   ui: 'ff',
	\   input: matchstr(getline('.')[: col('.') - 1], '\f*$'),
	\   sources: [
	\     #{ name: 'file', options: #{ defaultAction: 'feedkeys' } },
	\   ],
	\   uiParams: #{
	\     ff: #{
	\       replaceCol: match(getline('.')[: col('.') - 1], '\f*$') + 1,
	\     },
	\   },
	\ })<CR>
<
                                                            *ddu-ui-ff-faq-13*
Q: I want to use "ddu-ui-ff" in command line mode.
NOTE: It is experimental feature.

A: >vim
	cnoremap <C-q> <Cmd>call ddu#start(#{
	\   name: 'file',
	\   ui: 'ff',
	\   input: matchstr(getcmdline()[: getcmdpos() - 2], '\f*$'),
	\   sources: [
	\     #{ name: 'file', options: #{ defaultAction: 'feedkeys' } },
	\   ],
	\   uiParams: #{
	\     ff: #{
	\       replaceCol: match(getcmdline()[: getcmdpos() - 2],
	\                         '\f*$') + 1,
	\     },
	\   },
	\ })<CR><Cmd>call setcmdline('')<CR><CR>
<
                                                            *ddu-ui-ff-faq-14*
Q: I want to switch sources without clear current filter input.

A: >vim
	nnoremap <buffer> ff
	\ <Cmd>call ddu#ui#do_action('updateOptions', #{
	\   sources: [
	\     #{ name: 'file' },
	\   ],
	\ })<CR>
<
                                                            *ddu-ui-ff-faq-15*
Q: I want to use existing buffer to show preview.

A: Please use "no" in |ddu-ui-ff-param-previewSplit|.

                                                            *ddu-ui-ff-faq-16*
Q: ":UniteNext"/":UnitePrevious"/":Denite -resume -cursor-pos=+1 -immediately"
like commands are available?

A: >vim
	nnoremap <C-n>
	      \ <Cmd>call ddu#ui#multi_actions(
	      \   ['cursorNext', 'itemAction'], 'files')<CR>
	nnoremap <C-p>
	      \ <Cmd>call ddu#ui#multi_actions(
	      \   ['cursorPrevious', 'itemAction'], 'files')<CR>
<
                                                            *ddu-ui-ff-faq-17*
Q: I want to display cursor mark on the left of ddu window like
"telescope.nvim".

A: >vim
	autocmd FileType ddu-ff call s:ddu_ff_my_settings()
	function s:ddu_ff_my_settings() abort
	  setlocal signcolumn=yes
	  autocmd CursorMoved <buffer> call s:update_cursor()
	endfunction
	
	function s:update_cursor()
	  call sign_unplace('*', #{
	    \   id: 100,
	    \ })
	  call sign_define('cursor', #{
	    \   text: '>>',
	    \   texthl: 'Search',
	    \ })
	  call sign_place('*', #{
	    \   name: 'cursor',
	    \   line: '.'->line(),
	    \   buffer: '%'->bufnr(),
	    \   id: 100,
	    \ })
	endfunction
<
                                                            *ddu-ui-ff-faq-18*
Q: How do I set the floating title with list style ?

A: >vim
	call ddu#custom#patch_global(#{
	  \   uiParams: #{
	  \     ff: #{
	  \       floatingBorder: 'rounded',
	  \       floatingTitle: [['ddu', 'Red'], ['title', 'Blue']],
	  \     }
	  \   },
	  \ })
<
                                                            *ddu-ui-ff-faq-19*
Q: I want to align column when |ddu-ui-ff-param-prompt| is set.

A: You can set 'signcolumn' option in UI buffer.

                                                            *ddu-ui-ff-faq-20*
Q: When calling |ddu-ui-ff-action-quit| or |ddu-ui-ff-action-itemAction| from
filter window, it remains filter window.

A: It is the feature.  Because |ddu#ui#do_action()| does not change any mode.
You must escape command line mode when leave from the filter window.
>vim
	cnoremap <ESC>
	    \ <ESC><Cmd>call ddu#ui#do_action('quit')<CR>
	cnoremap <CR>
	    \ <ESC><Cmd>call ddu#ui#do_action('itemAction')<CR>
<
                                                            *ddu-ui-ff-faq-21*
Q: I cannot see what item is selected in the filter window.

A: You can set 'cursorline' option in ddu buffer.
>vim
	autocmd FileType ddu-ff call s:ddu_ff_my_settings()
	function s:ddu_ff_my_settings() abort
	  setlocal cursorline
	endfunction
<
                                                            *ddu-ui-ff-faq-22*
Q: I want to change preview cursor on the top.

A: >vim
	call ddu#custom#patch_global(#{
	      \   uiParams: #{
	      \     ff: #{
	      \       onPreview: denops#callback#register(
	      \         { args -> execute('normal! zt') }
	      \       ),
	      \     },
	      \   },
	      \ })
<
                                                            *ddu-ui-ff-faq-23*
Q: I want to scroll preview window.

A: >vim
	nnoremap <buffer> <C-p>
	      \ <Cmd>call ddu#ui#do_action('previewExecute',
	      \ #{ command: 'execute "normal! \<C-y>"' })<CR>
	nnoremap <buffer> <C-n>
	      \ <Cmd>call ddu#ui#do_action('previewExecute',
	      \ #{ command: 'execute "normal! \<C-e>"' })<CR>
<
                                                            *ddu-ui-ff-faq-24*
Q: I want to preview selected item automatically.

A: You need to set |ddu-ui-ff-param-autoAction| like this. >vim
	call ddu#custom#patch_global(#{
	      \   ui: 'ff',
	      \   uiParams: #{
	      \     ff: #{
	      \       autoAction: #{
	      \         name: 'preview',
	      \       },
	      \     },
	      \   },
	      \ })
<
                                                            *ddu-ui-ff-faq-25*
Q: I want to start filter window when UI is initialized.

A: It is not supported.  Because it has too many problems.  But you can use
the function.
>vim
	call ddu#start()
	autocmd User Ddu:uiDone ++nested
	      \ call ddu#ui#async_action('openFilterWindow')
<
NOTE: It must be |ddu#ui#async_action()|.

                                                            *ddu-ui-ff-faq-26*
Q: I want to change filter window position.

A: "cmdline.vim" supports the feature.
>vim
	autocmd User Ddu:ui:ff:openFilterWindow call cmdline#enable()
<
                                                            *ddu-ui-ff-faq-27*
Q: The filter input is cleared when I press <ESC> key.

A: It is Vim's feature.  <ESC> is not confirm key.  It is cancel your input.
If you don't like the behavior, you can map it.

                                                            *ddu-ui-ff-faq-28*
Q: The cursor is not restored when the items are refreshed.

A: It is feature.  The items are refreshed and it will be empty temporary.
The cursor cannot restore when the items are empty.
You can prevent the behavior by |ddu-option-sync|.

==============================================================================
COMPATIBILITY                                        *ddu-ui-ff-compatibility*

2024.05.28
* Remove |ddu-ui-ff-param-split| floating window support in Vim.  Because it
  does not work.

2024.05.27
* |ddu-ui-ff-param-cursorPos| is 1 origin.

2024.05.26
* Remove "cmdline.vim" support.  You can call |cmdline#enable()| in
  |ddu-ui-ff-autocmd-Ddu:ui:ff:openFilterWindow| autocmd.

2024.05.22
* Remove "filterUpdateTime" param.
* Remove "ddu#ui#ff#execute()".

2024.05.21
* Use command line instead of filter window.
* Remove filter related params:
  "filterFloatingPosition", "filterFloatingTitle",
  "filterFloatingTitlePos", "filterSplitDirection"
* Remove filter related actions:
  "closeFilterWindow", "leaveFilterWindow"
* Remove "ddu-ff-filter" filetype.
  Please use "Ddu:ui:ff:openFilterWindow" autocmd instead.

2024.03.11
* Remove "startFilter" option.  Because it has too many problems.

2024.01.19
* Rename "refreshItems" action to "redraw".
* "updateOptions" action does not redraw automatically.

2023.07.15
* Only highlight items of "maxHighlightItems" to improve the performance.

2023.07.12
* "preview" action does not toggle.

2023.07.05
* "startAutoAction" is required if you want to enable autoAction when UI
  initialized.

2023.06.11
* Does not restore to normal mode automatically.  It should be configured by
  user.

2023.05.20
* 'signcolumn' option does not be set automatically.

2023.03.19
* Remove "ddu#ui#ff#get_item()".  Please use "ddu#ui#get_item()" instead.
* Remove "ddu#ui#ff#close()".  Please use "closeFilterWindow" action instead.

2023.02.15
* Remove "previewVertical".  Please use "previewSplit" instead.

2022.12.28
* Remove 'cursorline' set.

2022.11.18
* Require Neovim 0.8.

2022.09.06
* "ddu#ui#ff#execute()" does not execute ":redraw" automatically.

2022.02.07
* Rename to "ff".

2022.02.01
* Rename "filterPosition" to "filterFloatingPosition".

2022.01.29
* Rename "ddu#ui#ff#do_map()" to "ddu#ui#ff#do_action()".

==============================================================================
vim:tw=78:ts=8:ft=help:norl:noet:fen:noet:
